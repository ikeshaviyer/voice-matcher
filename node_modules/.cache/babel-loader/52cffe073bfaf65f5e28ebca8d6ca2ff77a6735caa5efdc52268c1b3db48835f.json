{"ast":null,"code":"export class AudioAnalyzer {\n  constructor() {\n    this.context = void 0;\n    this.context = new AudioContext();\n  }\n  async analyzePitch(audioBuffer) {\n    return new Promise(resolve => {\n      const analyzer = this.context.createAnalyser();\n      analyzer.fftSize = 2048;\n      const source = this.context.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(analyzer);\n      analyzer.connect(this.context.destination);\n\n      // Get frequency data\n      const pitchArray = new Float32Array(analyzer.frequencyBinCount);\n      const amplitudeData = [];\n\n      // Get raw audio data for amplitude\n      const rawData = new Float32Array(audioBuffer.length);\n      audioBuffer.copyFromChannel(rawData, 0);\n\n      // Process amplitude in windows\n      const windowSize = 1024;\n      for (let i = 0; i < rawData.length; i += windowSize) {\n        let sum = 0;\n        const end = Math.min(i + windowSize, rawData.length);\n        for (let j = i; j < end; j++) {\n          sum += rawData[j] * rawData[j];\n        }\n        const rms = Math.sqrt(sum / (end - i));\n        amplitudeData.push(rms);\n      }\n\n      // We need to play the audio to get accurate frequency data\n      source.onended = () => {\n        analyzer.getFloatFrequencyData(pitchArray);\n        resolve({\n          pitchData: Array.from(pitchArray),\n          amplitudeData,\n          duration: audioBuffer.duration\n        });\n      };\n      source.start(0);\n    });\n  }\n  async compareAudio(original, recorded) {\n    // Check if recording is just silence\n    const recordedAvgAmplitude = this.getAverageAmplitude(recorded.amplitudeData);\n    if (recordedAvgAmplitude < 0.01) {\n      return {\n        score: 0,\n        durationMatch: 0,\n        pitchMatch: 0,\n        amplitudeMatch: 0\n      };\n    }\n\n    // Duration score (20%)\n    const durationMatch = Math.max(0, 100 - Math.abs(original.duration - recorded.duration) / original.duration * 100);\n\n    // Pitch score (40%)\n    const pitchMatch = this.compareArrays(original.pitchData, recorded.pitchData);\n\n    // Amplitude score (40%)\n    const amplitudeMatch = this.compareArrays(original.amplitudeData, recorded.amplitudeData);\n    const score = Math.round(durationMatch * 0.2 + pitchMatch * 0.4 + amplitudeMatch * 0.4);\n    return {\n      score,\n      durationMatch,\n      pitchMatch,\n      amplitudeMatch\n    };\n  }\n  getAverageAmplitude(arr) {\n    if (arr.length === 0) return 0;\n    const sum = arr.reduce((a, b) => a + Math.abs(b), 0);\n    return sum / arr.length;\n  }\n  compareArrays(arr1, arr2) {\n    const length = Math.min(arr1.length, arr2.length);\n    const normalizedArr1 = this.normalizeArray(arr1.slice(0, length));\n    const normalizedArr2 = this.normalizeArray(arr2.slice(0, length));\n    let totalDiff = 0;\n    let significantPoints = 0;\n    for (let i = 0; i < length; i++) {\n      // Only compare points where at least one signal has significant amplitude\n      if (normalizedArr1[i] > 0.1 || normalizedArr2[i] > 0.1) {\n        totalDiff += Math.abs(normalizedArr1[i] - normalizedArr2[i]);\n        significantPoints++;\n      }\n    }\n    if (significantPoints === 0) return 0;\n    return Math.max(0, 100 - totalDiff / significantPoints * 100);\n  }\n  normalizeArray(arr) {\n    const max = Math.max(...arr);\n    if (max === 0) return arr; // Prevent division by zero\n\n    return arr.map(value => value / max);\n  }\n  async audioBufferFromBlob(blob) {\n    const arrayBuffer = await blob.arrayBuffer();\n    return await this.context.decodeAudioData(arrayBuffer);\n  }\n}\nexport const audioAnalyzer = new AudioAnalyzer();","map":{"version":3,"names":["AudioAnalyzer","constructor","context","AudioContext","analyzePitch","audioBuffer","Promise","resolve","analyzer","createAnalyser","fftSize","source","createBufferSource","buffer","connect","destination","pitchArray","Float32Array","frequencyBinCount","amplitudeData","rawData","length","copyFromChannel","windowSize","i","sum","end","Math","min","j","rms","sqrt","push","onended","getFloatFrequencyData","pitchData","Array","from","duration","start","compareAudio","original","recorded","recordedAvgAmplitude","getAverageAmplitude","score","durationMatch","pitchMatch","amplitudeMatch","max","abs","compareArrays","round","arr","reduce","a","b","arr1","arr2","normalizedArr1","normalizeArray","slice","normalizedArr2","totalDiff","significantPoints","map","value","audioBufferFromBlob","blob","arrayBuffer","decodeAudioData","audioAnalyzer"],"sources":["C:/Users/ikesh/Desktop/voice-matcher/src/utils/audioAnalysis.ts"],"sourcesContent":["export interface AudioFeatures {\r\n  pitchData: number[];\r\n  amplitudeData: number[];\r\n  duration: number;\r\n}\r\n\r\nexport class AudioAnalyzer {\r\n  private context: AudioContext;\r\n  \r\n  constructor() {\r\n    this.context = new AudioContext();\r\n  }\r\n\r\n  async analyzePitch(audioBuffer: AudioBuffer): Promise<AudioFeatures> {\r\n    return new Promise((resolve) => {\r\n      const analyzer = this.context.createAnalyser();\r\n      analyzer.fftSize = 2048;\r\n      \r\n      const source = this.context.createBufferSource();\r\n      source.buffer = audioBuffer;\r\n      source.connect(analyzer);\r\n      analyzer.connect(this.context.destination);\r\n      \r\n      // Get frequency data\r\n      const pitchArray = new Float32Array(analyzer.frequencyBinCount);\r\n      const amplitudeData: number[] = [];\r\n      \r\n      // Get raw audio data for amplitude\r\n      const rawData = new Float32Array(audioBuffer.length);\r\n      audioBuffer.copyFromChannel(rawData, 0);\r\n      \r\n      // Process amplitude in windows\r\n      const windowSize = 1024;\r\n      for (let i = 0; i < rawData.length; i += windowSize) {\r\n        let sum = 0;\r\n        const end = Math.min(i + windowSize, rawData.length);\r\n        for (let j = i; j < end; j++) {\r\n          sum += rawData[j] * rawData[j];\r\n        }\r\n        const rms = Math.sqrt(sum / (end - i));\r\n        amplitudeData.push(rms);\r\n      }\r\n\r\n      // We need to play the audio to get accurate frequency data\r\n      source.onended = () => {\r\n        analyzer.getFloatFrequencyData(pitchArray);\r\n        resolve({\r\n          pitchData: Array.from(pitchArray),\r\n          amplitudeData,\r\n          duration: audioBuffer.duration\r\n        });\r\n      };\r\n      \r\n      source.start(0);\r\n    });\r\n  }\r\n\r\n  async compareAudio(original: AudioFeatures, recorded: AudioFeatures): Promise<{\r\n    score: number;\r\n    durationMatch: number;\r\n    pitchMatch: number;\r\n    amplitudeMatch: number;\r\n  }> {\r\n    // Check if recording is just silence\r\n    const recordedAvgAmplitude = this.getAverageAmplitude(recorded.amplitudeData);\r\n    if (recordedAvgAmplitude < 0.01) {\r\n      return {\r\n        score: 0,\r\n        durationMatch: 0,\r\n        pitchMatch: 0,\r\n        amplitudeMatch: 0\r\n      };\r\n    }\r\n\r\n    // Duration score (20%)\r\n    const durationMatch = Math.max(0, 100 - \r\n      (Math.abs(original.duration - recorded.duration) / original.duration) * 100\r\n    );\r\n\r\n    // Pitch score (40%)\r\n    const pitchMatch = this.compareArrays(original.pitchData, recorded.pitchData);\r\n    \r\n    // Amplitude score (40%)\r\n    const amplitudeMatch = this.compareArrays(original.amplitudeData, recorded.amplitudeData);\r\n    \r\n    const score = Math.round(\r\n      durationMatch * 0.2 +\r\n      pitchMatch * 0.4 +\r\n      amplitudeMatch * 0.4\r\n    );\r\n\r\n    return {\r\n      score,\r\n      durationMatch,\r\n      pitchMatch,\r\n      amplitudeMatch\r\n    };\r\n  }\r\n\r\n  private getAverageAmplitude(arr: number[]): number {\r\n    if (arr.length === 0) return 0;\r\n    const sum = arr.reduce((a, b) => a + Math.abs(b), 0);\r\n    return sum / arr.length;\r\n  }\r\n\r\n  private compareArrays(arr1: number[], arr2: number[]): number {\r\n    const length = Math.min(arr1.length, arr2.length);\r\n    const normalizedArr1 = this.normalizeArray(arr1.slice(0, length));\r\n    const normalizedArr2 = this.normalizeArray(arr2.slice(0, length));\r\n    \r\n    let totalDiff = 0;\r\n    let significantPoints = 0;\r\n    \r\n    for (let i = 0; i < length; i++) {\r\n      // Only compare points where at least one signal has significant amplitude\r\n      if (normalizedArr1[i] > 0.1 || normalizedArr2[i] > 0.1) {\r\n        totalDiff += Math.abs(normalizedArr1[i] - normalizedArr2[i]);\r\n        significantPoints++;\r\n      }\r\n    }\r\n    \r\n    if (significantPoints === 0) return 0;\r\n    return Math.max(0, 100 - (totalDiff / significantPoints) * 100);\r\n  }\r\n\r\n  private normalizeArray(arr: number[]): number[] {\r\n    const max = Math.max(...arr);\r\n    if (max === 0) return arr; // Prevent division by zero\r\n    \r\n    return arr.map(value => value / max);\r\n  }\r\n\r\n  async audioBufferFromBlob(blob: Blob): Promise<AudioBuffer> {\r\n    const arrayBuffer = await blob.arrayBuffer();\r\n    return await this.context.decodeAudioData(arrayBuffer);\r\n  }\r\n}\r\n\r\nexport const audioAnalyzer = new AudioAnalyzer(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}