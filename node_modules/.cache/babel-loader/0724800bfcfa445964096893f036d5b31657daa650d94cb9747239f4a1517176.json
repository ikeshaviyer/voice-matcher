{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ikesh\\\\Desktop\\\\voice-matcher\\\\src\\\\components\\\\AudioInputBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AudioInputBar = ({\n  onDeviceSelect\n}) => {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState('');\n  const [audioLevel, setAudioLevel] = useState(0);\n  useEffect(() => {\n    // Request permission and get audio devices\n    const getDevices = async () => {\n      try {\n        // First request microphone permission\n        await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n\n        // Then enumerate devices\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const audioDevices = devices.filter(device => device.kind === 'audioinput');\n        setDevices(audioDevices);\n        if (audioDevices.length > 0) {\n          setSelectedDevice(audioDevices[0].deviceId);\n          onDeviceSelect(audioDevices[0].deviceId);\n        }\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n      }\n    };\n    getDevices();\n  }, [onDeviceSelect]);\n\n  // Update audio level visualization\n  useEffect(() => {\n    if (!selectedDevice) return;\n    let audioContext;\n    let analyser;\n    let dataArray;\n    let animationId;\n    const updateAudioLevel = () => {\n      analyser.getByteFrequencyData(dataArray);\n      const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n      setAudioLevel(Math.min(100, average / 128 * 100));\n      animationId = requestAnimationFrame(updateAudioLevel);\n    };\n    const initializeAudioAnalysis = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: {\n            deviceId: {\n              exact: selectedDevice\n            }\n          }\n        });\n        audioContext = new AudioContext();\n        const source = audioContext.createMediaStreamSource(stream);\n        analyser = audioContext.createAnalyser();\n        analyser.fftSize = 256;\n        source.connect(analyser);\n        dataArray = new Uint8Array(analyser.frequencyBinCount);\n        updateAudioLevel();\n      } catch (error) {\n        console.error('Error setting up audio analysis:', error);\n      }\n    };\n    initializeAudioAnalysis();\n    return () => {\n      if (animationId) cancelAnimationFrame(animationId);\n      if (audioContext) audioContext.close();\n    };\n  }, [selectedDevice]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-md space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedDevice,\n      onChange: e => {\n        setSelectedDevice(e.target.value);\n        onDeviceSelect(e.target.value);\n      },\n      className: \"w-full p-2 bg-gray-700 text-white rounded-lg\",\n      children: devices.map(device => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: device.deviceId,\n        children: device.label || `Microphone ${device.deviceId.slice(0, 5)}`\n      }, device.deviceId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-4 bg-gray-700 rounded-full overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-full bg-green-500 transition-all duration-100\",\n        style: {\n          width: `${audioLevel}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioInputBar, \"wW4ftcX0WbjhfuhieO2z8M5dldI=\");\n_c = AudioInputBar;\nvar _c;\n$RefreshReg$(_c, \"AudioInputBar\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AudioInputBar","onDeviceSelect","_s","devices","setDevices","selectedDevice","setSelectedDevice","audioLevel","setAudioLevel","getDevices","navigator","mediaDevices","getUserMedia","audio","enumerateDevices","audioDevices","filter","device","kind","length","deviceId","error","console","audioContext","analyser","dataArray","animationId","updateAudioLevel","getByteFrequencyData","average","reduce","a","b","Math","min","requestAnimationFrame","initializeAudioAnalysis","stream","exact","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","Uint8Array","frequencyBinCount","cancelAnimationFrame","close","className","children","value","onChange","e","target","map","label","slice","fileName","_jsxFileName","lineNumber","columnNumber","style","width","_c","$RefreshReg$"],"sources":["C:/Users/ikesh/Desktop/voice-matcher/src/components/AudioInputBar.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\ninterface AudioInputBarProps {\r\n  onDeviceSelect: (deviceId: string) => void;\r\n}\r\n\r\nexport const AudioInputBar: React.FC<AudioInputBarProps> = ({ onDeviceSelect }) => {\r\n  const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [selectedDevice, setSelectedDevice] = useState<string>('');\r\n  const [audioLevel, setAudioLevel] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    // Request permission and get audio devices\r\n    const getDevices = async () => {\r\n      try {\r\n        // First request microphone permission\r\n        await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        \r\n        // Then enumerate devices\r\n        const devices = await navigator.mediaDevices.enumerateDevices();\r\n        const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n        setDevices(audioDevices);\r\n        \r\n        if (audioDevices.length > 0) {\r\n          setSelectedDevice(audioDevices[0].deviceId);\r\n          onDeviceSelect(audioDevices[0].deviceId);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error accessing microphone:', error);\r\n      }\r\n    };\r\n\r\n    getDevices();\r\n  }, [onDeviceSelect]);\r\n\r\n  // Update audio level visualization\r\n  useEffect(() => {\r\n    if (!selectedDevice) return;\r\n\r\n    let audioContext: AudioContext;\r\n    let analyser: AnalyserNode;\r\n    let dataArray: Uint8Array;\r\n    let animationId: number;\r\n\r\n    const updateAudioLevel = () => {\r\n      analyser.getByteFrequencyData(dataArray);\r\n      const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\r\n      setAudioLevel(Math.min(100, (average / 128) * 100));\r\n      animationId = requestAnimationFrame(updateAudioLevel);\r\n    };\r\n\r\n    const initializeAudioAnalysis = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          audio: { deviceId: { exact: selectedDevice } }\r\n        });\r\n\r\n        audioContext = new AudioContext();\r\n        const source = audioContext.createMediaStreamSource(stream);\r\n        analyser = audioContext.createAnalyser();\r\n        analyser.fftSize = 256;\r\n        source.connect(analyser);\r\n        \r\n        dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n        updateAudioLevel();\r\n      } catch (error) {\r\n        console.error('Error setting up audio analysis:', error);\r\n      }\r\n    };\r\n\r\n    initializeAudioAnalysis();\r\n\r\n    return () => {\r\n      if (animationId) cancelAnimationFrame(animationId);\r\n      if (audioContext) audioContext.close();\r\n    };\r\n  }, [selectedDevice]);\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md space-y-4\">\r\n      <select\r\n        value={selectedDevice}\r\n        onChange={(e) => {\r\n          setSelectedDevice(e.target.value);\r\n          onDeviceSelect(e.target.value);\r\n        }}\r\n        className=\"w-full p-2 bg-gray-700 text-white rounded-lg\"\r\n      >\r\n        {devices.map(device => (\r\n          <option key={device.deviceId} value={device.deviceId}>\r\n            {device.label || `Microphone ${device.deviceId.slice(0, 5)}`}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      \r\n      <div className=\"w-full h-4 bg-gray-700 rounded-full overflow-hidden\">\r\n        <div\r\n          className=\"h-full bg-green-500 transition-all duration-100\"\r\n          style={{ width: `${audioLevel}%` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}