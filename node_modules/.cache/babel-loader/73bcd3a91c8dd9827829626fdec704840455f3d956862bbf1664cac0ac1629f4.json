{"ast":null,"code":"export class AudioAnalyzer {\n  constructor() {\n    this.context = void 0;\n    this.analyzer = void 0;\n    this.context = new AudioContext();\n    this.analyzer = this.context.createAnalyser();\n    this.analyzer.fftSize = 2048;\n  }\n  async analyzePitch(audioBuffer) {\n    const bufferSource = this.context.createBufferSource();\n    bufferSource.buffer = audioBuffer;\n\n    // Create analyzer nodes\n    const pitchAnalyzer = this.context.createAnalyser();\n    const amplitudeAnalyzer = this.context.createAnalyser();\n    pitchAnalyzer.fftSize = 2048;\n    amplitudeAnalyzer.fftSize = 2048;\n\n    // Connect nodes\n    bufferSource.connect(pitchAnalyzer);\n    bufferSource.connect(amplitudeAnalyzer);\n\n    // Create data arrays\n    const pitchArray = new Float32Array(pitchAnalyzer.frequencyBinCount);\n    const amplitudeArray = new Float32Array(amplitudeAnalyzer.frequencyBinCount);\n\n    // Collect data\n    pitchAnalyzer.getFloatFrequencyData(pitchArray);\n    amplitudeAnalyzer.getFloatTimeDomainData(amplitudeArray);\n    return {\n      pitchData: Array.from(pitchArray),\n      amplitudeData: Array.from(amplitudeArray),\n      duration: audioBuffer.duration\n    };\n  }\n  async compareAudio(original, recorded) {\n    // Duration score\n    const durationMatch = Math.max(0, 100 - Math.abs(original.duration - recorded.duration) / original.duration * 100);\n\n    // Pitch score\n    const pitchMatch = this.compareArrays(original.pitchData, recorded.pitchData);\n\n    // Amplitude score\n    const amplitudeMatch = this.compareArrays(original.amplitudeData, recorded.amplitudeData);\n\n    // Weight the scores\n    const score = Math.round(durationMatch * 0.2 + pitchMatch * 0.5 + amplitudeMatch * 0.3);\n    return {\n      score,\n      durationMatch,\n      pitchMatch,\n      amplitudeMatch\n    };\n  }\n  compareArrays(arr1, arr2) {\n    // Ensure arrays are the same length\n    const length = Math.min(arr1.length, arr2.length);\n    const normalizedArr1 = this.normalizeArray(arr1.slice(0, length));\n    const normalizedArr2 = this.normalizeArray(arr2.slice(0, length));\n\n    // Calculate difference\n    let totalDiff = 0;\n    for (let i = 0; i < length; i++) {\n      totalDiff += Math.abs(normalizedArr1[i] - normalizedArr2[i]);\n    }\n\n    // Convert to similarity score (0-100)\n    const similarity = Math.max(0, 100 - totalDiff / length * 50);\n    return similarity;\n  }\n  normalizeArray(arr) {\n    const min = Math.min(...arr);\n    const max = Math.max(...arr);\n    const range = max - min;\n    return arr.map(value => (value - min) / range);\n  }\n  async audioBufferFromBlob(blob) {\n    const arrayBuffer = await blob.arrayBuffer();\n    return await this.context.decodeAudioData(arrayBuffer);\n  }\n}\nexport const audioAnalyzer = new AudioAnalyzer();","map":{"version":3,"names":["AudioAnalyzer","constructor","context","analyzer","AudioContext","createAnalyser","fftSize","analyzePitch","audioBuffer","bufferSource","createBufferSource","buffer","pitchAnalyzer","amplitudeAnalyzer","connect","pitchArray","Float32Array","frequencyBinCount","amplitudeArray","getFloatFrequencyData","getFloatTimeDomainData","pitchData","Array","from","amplitudeData","duration","compareAudio","original","recorded","durationMatch","Math","max","abs","pitchMatch","compareArrays","amplitudeMatch","score","round","arr1","arr2","length","min","normalizedArr1","normalizeArray","slice","normalizedArr2","totalDiff","i","similarity","arr","range","map","value","audioBufferFromBlob","blob","arrayBuffer","decodeAudioData","audioAnalyzer"],"sources":["C:/Users/ikesh/Desktop/voice-matcher/src/utils/audioAnalysis.ts"],"sourcesContent":["export interface AudioFeatures {\r\n  pitchData: number[];\r\n  amplitudeData: number[];\r\n  duration: number;\r\n}\r\n\r\nexport class AudioAnalyzer {\r\n  private context: AudioContext;\r\n  private analyzer: AnalyserNode;\r\n  \r\n  constructor() {\r\n    this.context = new AudioContext();\r\n    this.analyzer = this.context.createAnalyser();\r\n    this.analyzer.fftSize = 2048;\r\n  }\r\n\r\n  async analyzePitch(audioBuffer: AudioBuffer): Promise<AudioFeatures> {\r\n    const bufferSource = this.context.createBufferSource();\r\n    bufferSource.buffer = audioBuffer;\r\n    \r\n    // Create analyzer nodes\r\n    const pitchAnalyzer = this.context.createAnalyser();\r\n    const amplitudeAnalyzer = this.context.createAnalyser();\r\n    \r\n    pitchAnalyzer.fftSize = 2048;\r\n    amplitudeAnalyzer.fftSize = 2048;\r\n    \r\n    // Connect nodes\r\n    bufferSource.connect(pitchAnalyzer);\r\n    bufferSource.connect(amplitudeAnalyzer);\r\n    \r\n    // Create data arrays\r\n    const pitchArray = new Float32Array(pitchAnalyzer.frequencyBinCount);\r\n    const amplitudeArray = new Float32Array(amplitudeAnalyzer.frequencyBinCount);\r\n    \r\n    // Collect data\r\n    pitchAnalyzer.getFloatFrequencyData(pitchArray);\r\n    amplitudeAnalyzer.getFloatTimeDomainData(amplitudeArray);\r\n    \r\n    return {\r\n      pitchData: Array.from(pitchArray),\r\n      amplitudeData: Array.from(amplitudeArray),\r\n      duration: audioBuffer.duration\r\n    };\r\n  }\r\n\r\n  async compareAudio(original: AudioFeatures, recorded: AudioFeatures): Promise<{\r\n    score: number;\r\n    durationMatch: number;\r\n    pitchMatch: number;\r\n    amplitudeMatch: number;\r\n  }> {\r\n    // Duration score\r\n    const durationMatch = Math.max(0, 100 - \r\n      (Math.abs(original.duration - recorded.duration) / original.duration) * 100\r\n    );\r\n\r\n    // Pitch score\r\n    const pitchMatch = this.compareArrays(original.pitchData, recorded.pitchData);\r\n    \r\n    // Amplitude score\r\n    const amplitudeMatch = this.compareArrays(original.amplitudeData, recorded.amplitudeData);\r\n    \r\n    // Weight the scores\r\n    const score = Math.round(\r\n      durationMatch * 0.2 +\r\n      pitchMatch * 0.5 +\r\n      amplitudeMatch * 0.3\r\n    );\r\n\r\n    return {\r\n      score,\r\n      durationMatch,\r\n      pitchMatch,\r\n      amplitudeMatch\r\n    };\r\n  }\r\n\r\n  private compareArrays(arr1: number[], arr2: number[]): number {\r\n    // Ensure arrays are the same length\r\n    const length = Math.min(arr1.length, arr2.length);\r\n    const normalizedArr1 = this.normalizeArray(arr1.slice(0, length));\r\n    const normalizedArr2 = this.normalizeArray(arr2.slice(0, length));\r\n    \r\n    // Calculate difference\r\n    let totalDiff = 0;\r\n    for (let i = 0; i < length; i++) {\r\n      totalDiff += Math.abs(normalizedArr1[i] - normalizedArr2[i]);\r\n    }\r\n    \r\n    // Convert to similarity score (0-100)\r\n    const similarity = Math.max(0, 100 - (totalDiff / length) * 50);\r\n    return similarity;\r\n  }\r\n\r\n  private normalizeArray(arr: number[]): number[] {\r\n    const min = Math.min(...arr);\r\n    const max = Math.max(...arr);\r\n    const range = max - min;\r\n    \r\n    return arr.map(value => (value - min) / range);\r\n  }\r\n\r\n  async audioBufferFromBlob(blob: Blob): Promise<AudioBuffer> {\r\n    const arrayBuffer = await blob.arrayBuffer();\r\n    return await this.context.decodeAudioData(arrayBuffer);\r\n  }\r\n}\r\n\r\nexport const audioAnalyzer = new AudioAnalyzer(); "],"mappings":"AAMA,OAAO,MAAMA,aAAa,CAAC;EAIzBC,WAAWA,CAAA,EAAG;IAAA,KAHNC,OAAO;IAAA,KACPC,QAAQ;IAGd,IAAI,CAACD,OAAO,GAAG,IAAIE,YAAY,CAAC,CAAC;IACjC,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACD,OAAO,CAACG,cAAc,CAAC,CAAC;IAC7C,IAAI,CAACF,QAAQ,CAACG,OAAO,GAAG,IAAI;EAC9B;EAEA,MAAMC,YAAYA,CAACC,WAAwB,EAA0B;IACnE,MAAMC,YAAY,GAAG,IAAI,CAACP,OAAO,CAACQ,kBAAkB,CAAC,CAAC;IACtDD,YAAY,CAACE,MAAM,GAAGH,WAAW;;IAEjC;IACA,MAAMI,aAAa,GAAG,IAAI,CAACV,OAAO,CAACG,cAAc,CAAC,CAAC;IACnD,MAAMQ,iBAAiB,GAAG,IAAI,CAACX,OAAO,CAACG,cAAc,CAAC,CAAC;IAEvDO,aAAa,CAACN,OAAO,GAAG,IAAI;IAC5BO,iBAAiB,CAACP,OAAO,GAAG,IAAI;;IAEhC;IACAG,YAAY,CAACK,OAAO,CAACF,aAAa,CAAC;IACnCH,YAAY,CAACK,OAAO,CAACD,iBAAiB,CAAC;;IAEvC;IACA,MAAME,UAAU,GAAG,IAAIC,YAAY,CAACJ,aAAa,CAACK,iBAAiB,CAAC;IACpE,MAAMC,cAAc,GAAG,IAAIF,YAAY,CAACH,iBAAiB,CAACI,iBAAiB,CAAC;;IAE5E;IACAL,aAAa,CAACO,qBAAqB,CAACJ,UAAU,CAAC;IAC/CF,iBAAiB,CAACO,sBAAsB,CAACF,cAAc,CAAC;IAExD,OAAO;MACLG,SAAS,EAAEC,KAAK,CAACC,IAAI,CAACR,UAAU,CAAC;MACjCS,aAAa,EAAEF,KAAK,CAACC,IAAI,CAACL,cAAc,CAAC;MACzCO,QAAQ,EAAEjB,WAAW,CAACiB;IACxB,CAAC;EACH;EAEA,MAAMC,YAAYA,CAACC,QAAuB,EAAEC,QAAuB,EAKhE;IACD;IACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,GAClCD,IAAI,CAACE,GAAG,CAACL,QAAQ,CAACF,QAAQ,GAAGG,QAAQ,CAACH,QAAQ,CAAC,GAAGE,QAAQ,CAACF,QAAQ,GAAI,GAC1E,CAAC;;IAED;IACA,MAAMQ,UAAU,GAAG,IAAI,CAACC,aAAa,CAACP,QAAQ,CAACN,SAAS,EAAEO,QAAQ,CAACP,SAAS,CAAC;;IAE7E;IACA,MAAMc,cAAc,GAAG,IAAI,CAACD,aAAa,CAACP,QAAQ,CAACH,aAAa,EAAEI,QAAQ,CAACJ,aAAa,CAAC;;IAEzF;IACA,MAAMY,KAAK,GAAGN,IAAI,CAACO,KAAK,CACtBR,aAAa,GAAG,GAAG,GACnBI,UAAU,GAAG,GAAG,GAChBE,cAAc,GAAG,GACnB,CAAC;IAED,OAAO;MACLC,KAAK;MACLP,aAAa;MACbI,UAAU;MACVE;IACF,CAAC;EACH;EAEQD,aAAaA,CAACI,IAAc,EAAEC,IAAc,EAAU;IAC5D;IACA,MAAMC,MAAM,GAAGV,IAAI,CAACW,GAAG,CAACH,IAAI,CAACE,MAAM,EAAED,IAAI,CAACC,MAAM,CAAC;IACjD,MAAME,cAAc,GAAG,IAAI,CAACC,cAAc,CAACL,IAAI,CAACM,KAAK,CAAC,CAAC,EAAEJ,MAAM,CAAC,CAAC;IACjE,MAAMK,cAAc,GAAG,IAAI,CAACF,cAAc,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC,EAAEJ,MAAM,CAAC,CAAC;;IAEjE;IACA,IAAIM,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC/BD,SAAS,IAAIhB,IAAI,CAACE,GAAG,CAACU,cAAc,CAACK,CAAC,CAAC,GAAGF,cAAc,CAACE,CAAC,CAAC,CAAC;IAC9D;;IAEA;IACA,MAAMC,UAAU,GAAGlB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAIe,SAAS,GAAGN,MAAM,GAAI,EAAE,CAAC;IAC/D,OAAOQ,UAAU;EACnB;EAEQL,cAAcA,CAACM,GAAa,EAAY;IAC9C,MAAMR,GAAG,GAAGX,IAAI,CAACW,GAAG,CAAC,GAAGQ,GAAG,CAAC;IAC5B,MAAMlB,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,GAAGkB,GAAG,CAAC;IAC5B,MAAMC,KAAK,GAAGnB,GAAG,GAAGU,GAAG;IAEvB,OAAOQ,GAAG,CAACE,GAAG,CAACC,KAAK,IAAI,CAACA,KAAK,GAAGX,GAAG,IAAIS,KAAK,CAAC;EAChD;EAEA,MAAMG,mBAAmBA,CAACC,IAAU,EAAwB;IAC1D,MAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAW,CAAC,CAAC;IAC5C,OAAO,MAAM,IAAI,CAACrD,OAAO,CAACsD,eAAe,CAACD,WAAW,CAAC;EACxD;AACF;AAEA,OAAO,MAAME,aAAa,GAAG,IAAIzD,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}