{"ast":null,"code":"// Declare the require.context type\n\n// Use require.context to get all MP3 files from the assets/audio folder\nconst audioFiles = require.context('../../public/assets/audio', false, /\\.mp3$/);\nexport const SAMPLE_CLIPS = audioFiles.keys().map(_c = (path, index) => {\n  // Remove the './' from the start and '.mp3' from the end to get a clean name\n  const name = path.replace(/^\\.\\//, '') // Remove './' from start\n  .replace(/\\.mp3$/, '') // Remove '.mp3' from end\n  .replace(/([A-Z])/g, ' $1') // Add spaces before capital letters\n  .trim();\n  return {\n    id: `clip${index + 1}`,\n    name: name,\n    file: `/assets/audio/${path.replace(/^\\.\\//, '')}`\n  };\n});\n_c2 = SAMPLE_CLIPS;\nvar _c, _c2;\n$RefreshReg$(_c, \"SAMPLE_CLIPS$audioFiles.keys().map\");\n$RefreshReg$(_c2, \"SAMPLE_CLIPS\");","map":{"version":3,"names":["audioFiles","require","context","SAMPLE_CLIPS","keys","map","_c","path","index","name","replace","trim","id","file","_c2","$RefreshReg$"],"sources":["C:/Users/ikesh/Desktop/voice-matcher/src/types/audio.ts"],"sourcesContent":["export interface AudioClip {\r\n  id: string;\r\n  name: string;\r\n  file: string;\r\n  duration?: number;  // Make duration optional since it's set after loading\r\n}\r\n\r\nexport interface DetailedScore {\r\n  clipId: string;\r\n  score: number;\r\n  durationMatch: number;\r\n  amplitudeMatch: number;\r\n  pitchMatch: number;\r\n}\r\n\r\n// Declare the require.context type\r\ndeclare const require: {\r\n  context: (\r\n    directory: string,\r\n    useSubdirectories: boolean,\r\n    regExp: RegExp\r\n  ) => {\r\n    keys(): string[];\r\n  };\r\n};\r\n\r\n// Use require.context to get all MP3 files from the assets/audio folder\r\nconst audioFiles = require.context('../../public/assets/audio', false, /\\.mp3$/);\r\n\r\nexport const SAMPLE_CLIPS: AudioClip[] = audioFiles.keys().map((path: string, index: number) => {\r\n  // Remove the './' from the start and '.mp3' from the end to get a clean name\r\n  const name = path\r\n    .replace(/^\\.\\//, '')  // Remove './' from start\r\n    .replace(/\\.mp3$/, '')  // Remove '.mp3' from end\r\n    .replace(/([A-Z])/g, ' $1') // Add spaces before capital letters\r\n    .trim();\r\n\r\n  return {\r\n    id: `clip${index + 1}`,\r\n    name: name,\r\n    file: `/assets/audio/${path.replace(/^\\.\\//, '')}`,\r\n  };\r\n}); "],"mappings":"AAeA;;AAWA;AACA,MAAMA,UAAU,GAAGC,OAAO,CAACC,OAAO,CAAC,2BAA2B,EAAE,KAAK,EAAE,QAAQ,CAAC;AAEhF,OAAO,MAAMC,YAAyB,GAAGH,UAAU,CAACI,IAAI,CAAC,CAAC,CAACC,GAAG,CAAAC,EAAA,GAACA,CAACC,IAAY,EAAEC,KAAa,KAAK;EAC9F;EACA,MAAMC,IAAI,GAAGF,IAAI,CACdG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAE;EAAA,CACtBA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAE;EAAA,CACvBA,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;EAAA,CAC3BC,IAAI,CAAC,CAAC;EAET,OAAO;IACLC,EAAE,EAAE,OAAOJ,KAAK,GAAG,CAAC,EAAE;IACtBC,IAAI,EAAEA,IAAI;IACVI,IAAI,EAAE,iBAAiBN,IAAI,CAACG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EAClD,CAAC;AACH,CAAC,CAAC;AAACI,GAAA,GAbUX,YAAyB;AAAA,IAAAG,EAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}